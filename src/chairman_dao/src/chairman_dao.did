type ChairmanDaoStableStorage = record {
    accounts: vec Account;
    tasks: vec Task;
};

type reputation = nat64;

type TaskState = variant {
    // The task is open for claim
    Open;

    // The task can no longer be claimed
    Closed;
};

type Task = record {
    id: nat64;
    creator: principal;
    state: TaskState;
    task_info: TaskInfo;
};

type TaskInfo = record {
    name: text;
    description: text;
    proposed_amount: reputation;
};

type SubmitTaskResult = variant {
    Ok: nat64;
    Err: text;
};

type Account = record {
    owner: principal;
    reputation: reputation;
};

service : (ChairmanDaoStableStorage) -> {
    // Returns the amount of reputation the caller has
    account_reputation: () -> (reputation) query;

    // Lists all accounts
    list_accounts: () -> (vec Account) query;

    // Submit a task
    submit_task: (TaskInfo) -> (SubmitTaskResult);
}
