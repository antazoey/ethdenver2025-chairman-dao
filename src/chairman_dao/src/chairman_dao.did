type Account = record {
  owner : principal;
  voting_power : VotingPower;
  payouts : vec Payout;
};
type ChairmanDaoStableStorage = record {
  tasks : vec Task;
  accounts : vec Account;
  proposals : vec Proposal;
};
type Claim = record { account : principal; percentage : float64 };
type Payout = record { timestamp : nat64; voting_power : VotingPower };
type Proposal = record {
  id : nat64;
  new_description : opt text;
  title : text;
  description : text;
  state : ProposalState;
  completion_notes : opt text;
  new_title : opt text;
  notes : text;
  health_only : bool;
};
type ProposalState = variant { Open; Rejected; Accepted };
type Result = variant { Ok; Err : text };
type Result_1 = variant { Ok : nat64; Err : text };
type Task = record {
  id : nat64;
  claims : vec Claim;
  estimated_spirit : nat64;
  title : text;
  estimated_health : nat64;
  ratings : vec record { principal; VotingPower };
  description : text;
  state : TaskState;
  notes : vec TaskNote;
  voting_power : VotingPower;
};
type TaskNote = record { note : text; author : principal };
type TaskState = variant { Open; Closed; Pending };
type VotingPower = record { spirit : nat64; health : nat64 };
service : (ChairmanDaoStableStorage) -> {
  accept_proposal : (nat64, opt text, opt text, opt text) -> (Result);
  add_account : (Account) -> ();
  add_task_note : (nat64, text) -> (Result);
  claim_task : (nat64) -> (Result);
  complete_task : (nat64, bool) -> (Result);
  get_account : (opt principal) -> (Account) query;
  get_proposal : (nat64) -> (Proposal) query;
  get_task : (nat64) -> (Task) query;
  judge_claimant : (nat64, nat64, float64) -> (Result);
  list_accounts : () -> (vec Account) query;
  list_proposals : () -> (vec Proposal) query;
  list_tasks : () -> (vec Task) query;
  open_task : (nat64) -> (Result);
  rate_task : (nat64, VotingPower) -> (Result);
  reject_proposal : (nat64, opt text) -> (Result);
  submit_proposal : (text, text, text, bool) -> (Result_1);
  submit_task : (text, text, VotingPower) -> (Result_1);
}
