type Account = record {
  owner : principal;
  voting_power : VotingPower;
  payouts : vec Payout;
};
type ChairmanDaoStableStorage = record {
  tasks : vec Task;
  accounts : vec Account;
  proposals : vec Proposal;
};
type Claim = record { account : principal; percentage : float64 };
type Payout = record { timestamp : nat64; voting_power : VotingPower };
type Proposal = record {
  id : nat64;
  new_description : opt text;
  title : text;
  description : text;
  state : ProposalState;
  completion_notes : opt text;
  new_title : opt text;
  notes : text;
  health_only : bool;
};
type ProposalState = variant { Open; Rejected; Accepted };
type Task = record {
  id : nat64;
  claims : vec Claim;
  title : text;
  ratings : vec record { principal; VotingPower };
  description : text;
  state : TaskState;
  notes : vec TaskNote;
  voting_power : VotingPower;
};
type TaskNote = record { note : text; author : principal };
type TaskState = variant { Open; Closed; Pending };
type VotingPower = record { spirit : nat64; health : nat64 };
service : (ChairmanDaoStableStorage) -> {}
