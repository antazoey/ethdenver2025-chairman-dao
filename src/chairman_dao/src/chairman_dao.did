type ChairmanDaoStableStorage = record {
    accounts: vec Account;
    tasks: vec Task;
};

type reputation = nat64;

type TaskState = variant {
    Open;
    Closed;
};

type Task = record {
    id: nat64;
    creator: principal;
    state: TaskState;
    task_info: TaskInfo;
};

type TaskInfo = record {
    name: text;
    description: text;
    proposed_amount: reputation;
};

type ActionResult = variant {
    Ok: nat64;
    Err: text;
};

type Account = record {
    owner: principal;
    reputation: reputation;
};

type Proposal = record {
    id: nat64;
    proposer: principal;
    payload: ProposalPayload;
    state: ProposalState;
    votes_yes: reputation;
    votes_no: reputation;
    voters: vec principal;
};

type ProposalPayload = record {
    description: text;
    cost: nat64;
};

type ProposalState = variant {
    Open;
    Accepted;
    Rejected;
};

service : (ChairmanDaoStableStorage) -> {
    account_reputation: () -> (reputation) query;
    list_accounts: () -> (vec Account) query;
    submit_task: (TaskInfo) -> (ActionResult);
    submit_proposal: (ProposalPayload) -> (ActionResult);
}
